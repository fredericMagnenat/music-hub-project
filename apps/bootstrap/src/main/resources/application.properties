########################################
# Configuration commune (par d�faut)
########################################
quarkus.application.name=music-hub-backend


########################################
# Quinoa UI
########################################
quarkus.quinoa.ui-dir=../webui
quarkus.quinoa.dev-server.port=5173
quarkus.quinoa.enable-spa-routing=true
quarkus.quinoa.build-dir=build


########################################
# Profil de PRODUCTION
########################################
quarkus.datasource.db-kind=postgresql
quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5433/musichubdata
quarkus.datasource.username=admin
quarkus.datasource.password=admin
quarkus.datasource.jdbc.max-size=16
quarkus.datasource.jdbc.min-size=4
quarkus.hibernate-orm.database.generation=validate
quarkus.flyway.migrate-at-start=true
quarkus.flyway.baseline-on-migrate=true
quarkus.flyway.clean-disabled=true
quarkus.hibernate-orm.log.sql=true

########################################
# DEV
# #######################################


# APIs externes - D�veloppement
#%dev.spotify.auth.client-id=${SPOTIFY_CLIENT_ID:changeme}
#%dev.spotify.auth.client-secret=${SPOTIFY_CLIENT_SECRET:changeme}
#%dev.tidal.auth.client-id=${TIDAL_CLIENT_ID:changeme}
#%dev.tidal.auth.client-secret=${TIDAL_CLIENT_SECRET:changeme}

#%dev.quarkus.rest-client.spotify-auth-api.url=https://accounts.spotify.com
#%dev.quarkus.rest-client.spotify-api.url=https://api.spotify.com/v1
#%dev.quarkus.rest-client.tidal-auth-api.url=https://auth.tidal.com/v1
#%dev.quarkus.rest-client.tidal-api.url=https://openapi.tidal.com/v2


# Database
%dev.quarkus.datasource.db-kind=postgresql
%dev.quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5433/musichubdata
%dev.quarkus.datasource.username=admin
%dev.quarkus.datasource.password=admin
%dev.quarkus.datasource.jdbc.max-size=16
%dev.quarkus.datasource.jdbc.min-size=4
%dev.quarkus.flyway.migrate-at-start=true
%dev.quarkus.flyway.baseline-on-migrate=true
%dev.quarkus.flyway.clean-disabled=false
%dev.quarkus.flyway.locations=classpath:db/migration/producer,classpath:db/migration/artist
%dev.quarkus.flyway.repair-at-start=true
%dev.quarkus.hibernate-orm.log.sql=true


# Logs DEV
%dev.quarkus.log.level=INFO
%dev.quarkus.log.category."com.musichub".level=DEBUG
%dev.quarkus.log.category."org.jboss.resteasy.reactive.client".level=DEBUG
%dev.quarkus.rest-client.logging.scope=request-responsepour

########################################
# DEV-SCHEMA Profiles - Schema Generation Mode
########################################

# Profile for schema generation with PostgreSQL (development only)
%dev-schema.quarkus.hibernate-orm.database.generation=create
%dev-schema.quarkus.hibernate-orm.log.sql=true
%dev-schema.quarkus.hibernate-orm.log.format-sql=true
%dev-schema.quarkus.hibernate-orm.sql-load-script=no-file
%dev-schema.quarkus.flyway.migrate-at-start=false
%dev-schema.quarkus.datasource.db-kind=postgresql
%dev-schema.quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5433/musichubdata_temp
%dev-schema.quarkus.datasource.username=admin
%dev-schema.quarkus.datasource.password=admin
%dev-schema.quarkus.datasource.jdbc.max-size=8
%dev-schema.quarkus.datasource.jdbc.min-size=2

# Alternative: Use H2 for quick schema generation and export
%dev-schema-h2.quarkus.datasource.db-kind=h2
%dev-schema-h2.quarkus.datasource.jdbc.url=jdbc:h2:mem:schema-export;DB_CLOSE_DELAY=-1
%dev-schema-h2.quarkus.datasource.username=sa
%dev-schema-h2.quarkus.datasource.password=
%dev-schema-h2.quarkus.hibernate-orm.database.generation=create
%dev-schema-h2.quarkus.hibernate-orm.database.generation-halt-on-error=true
%dev-schema-h2.quarkus.hibernate-orm.log.sql=true
%dev-schema-h2.quarkus.hibernate-orm.log.format-sql=true
%dev-schema-h2.quarkus.hibernate-orm.sql-load-script=no-file
%dev-schema-h2.quarkus.flyway.migrate-at-start=false
%dev-schema-h2.quarkus.quinoa.enabled=false

########################################
# TEST
########################################
%test.quarkus.test.continuous-testing=disabled
%test.quarkus.quinoa.enabled=false

# APIs externes
#%test.tidal.auth.dev.token=test-token-for-tidal
#%test.tidal.auth.dev.expires-in=3600
#%test.spotify.auth.dev.token=test-token-for-spotify
#%test.spotify.auth.dev.expires-in=3600

#%test.quarkus.rest-client.spotify-auth-api.url=${wiremock.url:http://localhost:8089}
#%test.quarkus.rest-client.spotify-api.url=${wiremock.url:http://localhost:8089}
#%test.quarkus.rest-client.tidal-auth-api.url=${wiremock.url:http://localhost:8089}
#%test.quarkus.rest-client.tidal-api.url=${wiremock.url:http://localhost:8089}

# Configuration TestContainers pour PostgreSQL
%test.quarkus.datasource.db-kind=postgresql
%test.quarkus.datasource.devservices.enabled=true
%test.quarkus.hibernate-orm.database.generation=validate
%test.quarkus.flyway.migrate-at-start=true
%test.quarkus.flyway.clean-disabled=true

# D�sactiver OpenTelemetry en test
%test.quarkus.otel.sdk.disabled=true
%test.quarkus.otel.metrics.enabled=false

# Logs Tests
%test.quarkus.log.level=INFO
%test.quarkus.log.category."com.musichub".level=DEBUG
%test.quarkus.log.category."org.testcontainers".level=OFF
%test.quarkus.log.category."io.quarkus.test".level=DEBUG
%test.quarkus.rest-client.logging.scope=request-response

########################################
# Configuration OpenTelemetry (commune)
########################################
quarkus.otel.metrics.enabled=true
quarkus.otel.exporter.otlp.traces.protocol=http/protobuf
quarkus.log.console.format=%d{HH:mm:ss} %-5p traceId=%X{traceId}, parentId=%X{parentId}, spanId=%X{spanId}, sampled=%X{sampled} [%c{2.}] (%t) %s%e%n
quarkus.datasource.jdbc.telemetry=true

########################################
# Configuration Health Check (commune)
########################################
quarkus.smallrye-health.ui.enable=true
quarkus.smallrye-health.metrics.enabled=true

# Configuration des timeouts et seuils
health.database.timeout.ms=1000
health.memory.threshold.percentage=90

# Configuration CORS pour le monitoring
%prod.quarkus.http.cors=true
%prod.quarkus.http.cors.origins=${MONITORING_ORIGINS:http://localhost:3000}
%prod.quarkus.http.cors.methods=GET,OPTIONS
%prod.quarkus.http.cors.headers=accept,authorization,content-type
%prod.quarkus.http.cors.access-control-max-age=24H

# Logging des health checks
%prod.quarkus.log.category."com.musicdatahub.bootstrap.health".level=INFO
%dev.quarkus.log.category."com.musicdatahub.bootstrap.health".level=DEBUG
%test.quarkus.log.category."com.musicdatahub.bootstrap.health".level=WARN